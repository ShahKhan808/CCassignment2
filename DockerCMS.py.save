from flask import Flask, Response, render_template,
request
import json
from subprocess import Popen, PIPE
import os
from tempfile import mkdtemp
from werkzeug import secure_filename

app = Flask(__name__)

@app.route(&quot;/&quot;)
def index():
return &quot;&quot;&quot;
Available API endpoints:

GET /containers List all containers
GET /containers?state=running List running
containers (only)
GET /containers/&lt;id&gt; Inspect a specific
container
GET /containers/&lt;id&gt;/logs Dump specific
container logs
GET /images List all images

POST /images Create a new image
POST /containers Create a new
container

PATCH /containers/&lt;id&gt; Change a container&#39;s
state
PATCH /images/&lt;id&gt; Change a specific
image&#39;s attributesDELETE /containers/&lt;id&gt; Delete a specific
container
DELETE /containers Delete all containers
(including running)
DELETE /images/&lt;id&gt; Delete a specific
image
DELETE /images Delete all images

&quot;&quot;&quot;
def docker(*args):
cmd = [&#39;docker&#39;]
for sub in args:
cmd.append(sub)
process = Popen(cmd, stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()
if stderr.startswith(&#39;Error&#39;):
print &#39;Error: {0} -&gt; {1}&#39;.format(&#39; &#39;.join(cmd),
stderr)
return stderr + stdout

#
# Docker output parsing helpers
#

#
# Parses the output of a Docker PS command to a python
List
#
def docker_ps_to_array(output):
all = []
for c in [line.split() for line in
output.splitlines()[1:]]:
each = {}
